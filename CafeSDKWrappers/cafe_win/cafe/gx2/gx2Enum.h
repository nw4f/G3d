#pragma once

#include <ninTexUtils/gx2/gx2Enum.h>

typedef enum _GX2Boolean
{
    GX2_FALSE                      = 0,
    GX2_TRUE                       = 1,
    GX2_DISABLE                    = 0,
    GX2_ENABLE                     = 1
} GX2Boolean;

typedef enum _GX2FrontFaceMode
{
    GX2_FRONT_FACE_CCW             = 0,
    GX2_FRONT_FACE_CW              = 1,
    GX2_FRONT_FACE_FIRST           = GX2_FRONT_FACE_CCW,
    GX2_FRONT_FACE_LAST            = GX2_FRONT_FACE_CW
} GX2FrontFaceMode;

typedef enum _GX2PolygonMode
{
    GX2_POLYGON_MODE_POINT         = 0,
    GX2_POLYGON_MODE_LINE          = 1,
    GX2_POLYGON_MODE_TRIANGLE      = 2,
    GX2_POLYGON_MODE_FIRST         = GX2_POLYGON_MODE_POINT,
    GX2_POLYGON_MODE_LAST          = GX2_POLYGON_MODE_TRIANGLE
} GX2PolygonMode;

typedef enum _GX2CompareFunction
{
    GX2_COMPARE_NEVER              = 0,
    GX2_COMPARE_LESS               = 1,
    GX2_COMPARE_EQUAL              = 2,
    GX2_COMPARE_LEQUAL             = 3,
    GX2_COMPARE_GREATER            = 4,
    GX2_COMPARE_NOTEQUAL           = 5,
    GX2_COMPARE_GEQUAL             = 6,
    GX2_COMPARE_ALWAYS             = 7,
    GX2_COMPARE_FIRST              = GX2_COMPARE_NEVER,
    GX2_COMPARE_LAST               = GX2_COMPARE_ALWAYS
} GX2CompareFunction;

typedef enum _GX2StencilFunction
{
    GX2_STENCIL_KEEP               = 0,
    GX2_STENCIL_ZERO               = 1,
    GX2_STENCIL_REPLACE            = 2,
    GX2_STENCIL_INCR               = 3,
    GX2_STENCIL_DECR               = 4,
    GX2_STENCIL_INVERT             = 5,
    GX2_STENCIL_INCR_WRAP          = 6,
    GX2_STENCIL_DECR_WRAP          = 7,
    GX2_STENCIL_FIRST              = GX2_STENCIL_KEEP,
    GX2_STENCIL_LAST               = GX2_STENCIL_DECR_WRAP
} GX2StencilFunction;

typedef enum _GX2ChannelMask
{
    GX2_CHANNEL_MASK_NONE          = 0x0,
    GX2_CHANNEL_MASK_R             = 0x1,
    GX2_CHANNEL_MASK_G             = 0x2,
    GX2_CHANNEL_MASK_RG            = 0x3,
    GX2_CHANNEL_MASK_B             = 0x4,
    GX2_CHANNEL_MASK_RB            = 0x5,
    GX2_CHANNEL_MASK_GB            = 0x6,
    GX2_CHANNEL_MASK_RGB           = 0x7,
    GX2_CHANNEL_MASK_A             = 0x8,
    GX2_CHANNEL_MASK_RA            = 0x9,
    GX2_CHANNEL_MASK_GA            = 0xA,
    GX2_CHANNEL_MASK_RGA           = 0xB,
    GX2_CHANNEL_MASK_BA            = 0xC,
    GX2_CHANNEL_MASK_RBA           = 0xD,
    GX2_CHANNEL_MASK_GBA           = 0xE,
    GX2_CHANNEL_MASK_RGBA          = 0xF,
    GX2_CHANNEL_MASK_FIRST         = GX2_CHANNEL_MASK_NONE,
    GX2_CHANNEL_MASK_LAST          = GX2_CHANNEL_MASK_RGBA
} GX2ChannelMask;

typedef enum _GX2LogicOp
{
    GX2_LOGIC_OP_CLEAR             = 0x00,
    GX2_LOGIC_OP_SET               = 0xFF,
    GX2_LOGIC_OP_COPY              = 0xCC,
    GX2_LOGIC_OP_INVCOPY           = 0x33,
    GX2_LOGIC_OP_NOOP              = 0xAA,
    GX2_LOGIC_OP_INV               = 0x55,
    GX2_LOGIC_OP_AND               = 0x88,
    GX2_LOGIC_OP_NAND              = 0x77,
    GX2_LOGIC_OP_OR                = 0xEE,
    GX2_LOGIC_OP_NOR               = 0x11,
    GX2_LOGIC_OP_XOR               = 0x66,
    GX2_LOGIC_OP_EQUIV             = 0x99,
    GX2_LOGIC_OP_REVAND            = 0x44,
    GX2_LOGIC_OP_INVAND            = 0x22,
    GX2_LOGIC_OP_REVOR             = 0xDD,
    GX2_LOGIC_OP_INVOR             = 0xBB,

    GX2_LOGIC_OP_NONE = GX2_LOGIC_OP_COPY,
    GX2_LOGIC_OP_FIRST             = GX2_LOGIC_OP_CLEAR,
    GX2_LOGIC_OP_LAST              = GX2_LOGIC_OP_SET
} GX2LogicOp;

typedef enum _GX2BlendFunction
{
    GX2_BLEND_ZERO                     = 0,
    GX2_BLEND_ONE                      = 1,
    GX2_BLEND_SRC_COLOR                = 2,
    GX2_BLEND_ONE_MINUS_SRC_COLOR      = 3,
    GX2_BLEND_SRC_ALPHA                = 4,
    GX2_BLEND_ONE_MINUS_SRC_ALPHA      = 5,
    GX2_BLEND_DST_ALPHA                = 6,
    GX2_BLEND_ONE_MINUS_DST_ALPHA      = 7,
    GX2_BLEND_DST_COLOR                = 8,
    GX2_BLEND_ONE_MINUS_DST_COLOR      = 9,
    GX2_BLEND_SRC_ALPHA_SATURATE       = 10,
    GX2_BLEND_CONSTANT_COLOR           = 13,
    GX2_BLEND_ONE_MINUS_CONSTANT_COLOR = 14,
    GX2_BLEND_SRC1_COLOR               = 15,
    GX2_BLEND_ONE_MINUS_SRC1_COLOR     = 16,
    GX2_BLEND_SRC1_ALPHA               = 17,
    GX2_BLEND_ONE_MINUS_SRC1_ALPHA     = 18,
    GX2_BLEND_CONSTANT_ALPHA           = 19,
    GX2_BLEND_ONE_MINUS_CONSTANT_ALPHA = 20,
    GX2_BLEND_FIRST                    = GX2_BLEND_ZERO,
    GX2_BLEND_LAST                     = GX2_BLEND_ONE_MINUS_CONSTANT_ALPHA
} GX2BlendFunction;

typedef enum _GX2BlendCombine
{
    GX2_BLEND_COMBINE_ADD              = 0,
    GX2_BLEND_COMBINE_SRC_MINUS_DST    = 1,
    GX2_BLEND_COMBINE_MIN              = 2,
    GX2_BLEND_COMBINE_MAX              = 3,
    GX2_BLEND_COMBINE_DST_MINUS_SRC    = 4,
    GX2_BLEND_COMBINE_FIRST            = GX2_BLEND_COMBINE_ADD,
    GX2_BLEND_COMBINE_LAST             = GX2_BLEND_COMBINE_DST_MINUS_SRC
} GX2BlendCombine;

typedef enum _GX2RenderTarget
{
    GX2_RENDER_TARGET_0                = 0,
    GX2_RENDER_TARGET_1                = 1,
    GX2_RENDER_TARGET_2                = 2,
    GX2_RENDER_TARGET_3                = 3,
    GX2_RENDER_TARGET_4                = 4,
    GX2_RENDER_TARGET_5                = 5,
    GX2_RENDER_TARGET_6                = 6,
    GX2_RENDER_TARGET_7                = 7,
    GX2_RENDER_TARGET_FIRST            = GX2_RENDER_TARGET_0,
    GX2_RENDER_TARGET_LAST             = GX2_RENDER_TARGET_7
} GX2RenderTarget;

typedef enum _GX2AttribFormat
{
    GX2_ATTRIB_FORMAT_8_UNORM             = 0x00000000,
    GX2_ATTRIB_FORMAT_8_UINT              = 0x00000100,
    GX2_ATTRIB_FORMAT_8_SNORM             = 0x00000200,
    GX2_ATTRIB_FORMAT_8_SINT              = 0x00000300,
    GX2_ATTRIB_FORMAT_8_UINT_TO_FLOAT     = 0x00000800,
    GX2_ATTRIB_FORMAT_8_SINT_TO_FLOAT     = 0x00000a00,
    GX2_ATTRIB_FORMAT_4_4_UNORM           = 0x00000001,
    GX2_ATTRIB_FORMAT_16_UNORM            = 0x00000002,
    GX2_ATTRIB_FORMAT_16_UINT             = 0x00000102,
    GX2_ATTRIB_FORMAT_16_SNORM            = 0x00000202,
    GX2_ATTRIB_FORMAT_16_SINT             = 0x00000302,
    GX2_ATTRIB_FORMAT_16_FLOAT            = 0x00000803,
    GX2_ATTRIB_FORMAT_16_UINT_TO_FLOAT    = 0x00000802,
    GX2_ATTRIB_FORMAT_16_SINT_TO_FLOAT    = 0x00000a02,
    GX2_ATTRIB_FORMAT_8_8_UNORM           = 0x00000004,
    GX2_ATTRIB_FORMAT_8_8_UINT            = 0x00000104,
    GX2_ATTRIB_FORMAT_8_8_SNORM           = 0x00000204,
    GX2_ATTRIB_FORMAT_8_8_SINT            = 0x00000304,
    GX2_ATTRIB_FORMAT_8_8_UINT_TO_FLOAT   = 0x00000804,
    GX2_ATTRIB_FORMAT_8_8_SINT_TO_FLOAT   = 0x00000a04,
    GX2_ATTRIB_FORMAT_32_UINT             = 0x00000105,
    GX2_ATTRIB_FORMAT_32_SINT             = 0x00000305,
    GX2_ATTRIB_FORMAT_32_FLOAT            = 0x00000806,
    GX2_ATTRIB_FORMAT_16_16_UNORM         = 0x00000007,
    GX2_ATTRIB_FORMAT_16_16_UINT          = 0x00000107,
    GX2_ATTRIB_FORMAT_16_16_SNORM         = 0x00000207,
    GX2_ATTRIB_FORMAT_16_16_SINT          = 0x00000307,
    GX2_ATTRIB_FORMAT_16_16_FLOAT         = 0x00000808,
    GX2_ATTRIB_FORMAT_16_16_UINT_TO_FLOAT = 0x00000807,
    GX2_ATTRIB_FORMAT_16_16_SINT_TO_FLOAT = 0x00000a07,
    GX2_ATTRIB_FORMAT_10_11_11_FLOAT      = 0x00000809,
    GX2_ATTRIB_FORMAT_8_8_8_8_UNORM         = 0x0000000a,
    GX2_ATTRIB_FORMAT_8_8_8_8_UINT          = 0x0000010a,
    GX2_ATTRIB_FORMAT_8_8_8_8_SNORM         = 0x0000020a,
    GX2_ATTRIB_FORMAT_8_8_8_8_SINT          = 0x0000030a,
    GX2_ATTRIB_FORMAT_8_8_8_8_UINT_TO_FLOAT = 0x0000080a,
    GX2_ATTRIB_FORMAT_8_8_8_8_SINT_TO_FLOAT = 0x00000a0a,
    GX2_ATTRIB_FORMAT_10_10_10_2_UNORM      = 0x0000000b,
    GX2_ATTRIB_FORMAT_10_10_10_2_UINT       = 0x0000010b,
    GX2_ATTRIB_FORMAT_10_10_10_2_SNORM      = 0x0000020b,
    GX2_ATTRIB_FORMAT_10_10_10_2_SINT       = 0x0000030b,
    GX2_ATTRIB_FORMAT_32_32_UINT            = 0x0000010c,
    GX2_ATTRIB_FORMAT_32_32_SINT            = 0x0000030c,
    GX2_ATTRIB_FORMAT_32_32_FLOAT           = 0x0000080d,
    GX2_ATTRIB_FORMAT_16_16_16_16_UNORM         = 0x0000000e,
    GX2_ATTRIB_FORMAT_16_16_16_16_UINT          = 0x0000010e,
    GX2_ATTRIB_FORMAT_16_16_16_16_SNORM         = 0x0000020e,
    GX2_ATTRIB_FORMAT_16_16_16_16_SINT          = 0x0000030e,
    GX2_ATTRIB_FORMAT_16_16_16_16_FLOAT         = 0x0000080f,
    GX2_ATTRIB_FORMAT_16_16_16_16_UINT_TO_FLOAT = 0x0000080e,
    GX2_ATTRIB_FORMAT_16_16_16_16_SINT_TO_FLOAT = 0x00000a0e,
    GX2_ATTRIB_FORMAT_32_32_32_UINT             = 0x00000110,
    GX2_ATTRIB_FORMAT_32_32_32_SINT             = 0x00000310,
    GX2_ATTRIB_FORMAT_32_32_32_FLOAT            = 0x00000811,
    GX2_ATTRIB_FORMAT_32_32_32_32_UINT          = 0x00000112,
    GX2_ATTRIB_FORMAT_32_32_32_32_SINT          = 0x00000312,
    GX2_ATTRIB_FORMAT_32_32_32_32_FLOAT         = 0x00000813,
    GX2_ATTRIB_FORMAT_FIRST = GX2_ATTRIB_FORMAT_8_UNORM,
    GX2_ATTRIB_FORMAT_LAST  = GX2_ATTRIB_FORMAT_16_16_16_16_SINT_TO_FLOAT
} GX2AttribFormat;

typedef enum _GX2Component
{
    GX2_COMPONENT_X_R             = 0x00000000,
    GX2_COMPONENT_Y_G             = 0x00000001,
    GX2_COMPONENT_Z_B             = 0x00000002,
    GX2_COMPONENT_W_A             = 0x00000003,
    GX2_COMPONENT_C_0             = 0x00000004,
    GX2_COMPONENT_C_1             = 0x00000005,
    GX2_COMPONENT_FIRST           = GX2_COMPONENT_X_R,
    GX2_COMPONENT_LAST            = GX2_COMPONENT_C_1
} GX2Component;

typedef enum _GX2IndexFormat
{
    GX2_INDEX_FORMAT_U16_LE = 0,
    GX2_INDEX_FORMAT_U32_LE = 1,
    GX2_INDEX_FORMAT_U16 = 4,
    GX2_INDEX_FORMAT_U32 = 9,
    GX2_INDEX_FORMAT_FIRST  = GX2_INDEX_FORMAT_U16_LE,
    GX2_INDEX_FORMAT_LAST   = GX2_INDEX_FORMAT_U32
} GX2IndexFormat;

typedef enum _GX2PrimitiveType
{
    GX2_PRIMITIVE_POINTS                      = 0x01,
    GX2_PRIMITIVE_LINES                       = 0x02,
    GX2_PRIMITIVE_LINE_STRIP                  = 0x03,
    GX2_PRIMITIVE_TRIANGLES                   = 0x04,
    GX2_PRIMITIVE_TRIANGLE_FAN                = 0x05,
    GX2_PRIMITIVE_TRIANGLE_STRIP              = 0x06,
    GX2_PRIMITIVE_LINES_ADJACENCY             = 0x0a,
    GX2_PRIMITIVE_LINE_STRIP_ADJACENCY        = 0x0b,
    GX2_PRIMITIVE_TRIANGLES_ADJACENCY         = 0x0c,
    GX2_PRIMITIVE_TRIANGLE_STRIP_ADJACENCY    = 0x0d,
    GX2_PRIMITIVE_RECTS                       = 0x11,
    GX2_PRIMITIVE_LINE_LOOP                   = 0x12,
    GX2_PRIMITIVE_QUADS                       = 0x13,
    GX2_PRIMITIVE_QUAD_STRIP                  = 0x14,
    GX2_PRIMITIVE_TESSELLATE_LINES            = 0x82,
    GX2_PRIMITIVE_TESSELLATE_LINE_STRIP       = 0x83,
    GX2_PRIMITIVE_TESSELLATE_TRIANGLES        = 0x84,
    GX2_PRIMITIVE_TESSELLATE_TRIANGLE_STRIP   = 0x86,
    GX2_PRIMITIVE_TESSELLATE_QUADS            = 0x93,
    GX2_PRIMITIVE_TESSELLATE_QUAD_STRIP       = 0x94,
    GX2_PRIMITIVE_FIRST                    = GX2_PRIMITIVE_POINTS,
    GX2_PRIMITIVE_LAST                        = GX2_PRIMITIVE_TESSELLATE_QUAD_STRIP
} GX2PrimitiveType;

typedef enum _GX2ClearMode
{
    GX2_CLEAR_NONE    = 0,
    GX2_CLEAR_DEPTH   = 1,
    GX2_CLEAR_STENCIL = 2,
    GX2_CLEAR_D_REG   = 4,
    GX2_CLEAR_S_REG   = 8,
    GX2_CLEAR_BOTH          = GX2_CLEAR_DEPTH   | GX2_CLEAR_STENCIL,
    GX2_CLEAR_D_S_REG       = GX2_CLEAR_D_REG   | GX2_CLEAR_S_REG,
    GX2_CLEAR_DEPTH_D_REG   = GX2_CLEAR_DEPTH   | GX2_CLEAR_D_REG,
    GX2_CLEAR_STENCIL_S_REG = GX2_CLEAR_STENCIL | GX2_CLEAR_S_REG,
    GX2_CLEAR_BOTH_D_S_REG  = GX2_CLEAR_DEPTH_D_REG | GX2_CLEAR_STENCIL_S_REG,
    GX2_CLEAR_FIRST         = GX2_CLEAR_NONE,
    GX2_CLEAR_LAST          = GX2_CLEAR_BOTH_D_S_REG
} GX2ClearMode;

#define GX2_SURFACE_FORMAT_TC_R8_UNORM              GX2_SURFACE_FORMAT_UNORM_R8
#define GX2_SURFACE_FORMAT_TC_R8_UINT               GX2_SURFACE_FORMAT_UINT_R8
#define GX2_SURFACE_FORMAT_TC_R8_SNORM              GX2_SURFACE_FORMAT_SNORM_R8
#define GX2_SURFACE_FORMAT_TC_R8_SINT               GX2_SURFACE_FORMAT_SINT_R8
#define GX2_SURFACE_FORMAT_T_R4_G4_UNORM            GX2_SURFACE_FORMAT_UNORM_RG4
#define GX2_SURFACE_FORMAT_TCD_R16_UNORM            GX2_SURFACE_FORMAT_UNORM_R16
#define GX2_SURFACE_FORMAT_TC_R16_UINT              GX2_SURFACE_FORMAT_UINT_R16
#define GX2_SURFACE_FORMAT_TC_R16_SNORM             GX2_SURFACE_FORMAT_SNORM_R16
#define GX2_SURFACE_FORMAT_TC_R16_SINT              GX2_SURFACE_FORMAT_SINT_R16
#define GX2_SURFACE_FORMAT_TC_R16_FLOAT             GX2_SURFACE_FORMAT_FLOAT_R16
#define GX2_SURFACE_FORMAT_TC_R8_G8_UNORM           GX2_SURFACE_FORMAT_UNORM_RG8
#define GX2_SURFACE_FORMAT_TC_R8_G8_UINT            GX2_SURFACE_FORMAT_UINT_RG8
#define GX2_SURFACE_FORMAT_TC_R8_G8_SNORM           GX2_SURFACE_FORMAT_SNORM_RG8
#define GX2_SURFACE_FORMAT_TC_R8_G8_SINT            GX2_SURFACE_FORMAT_SINT_RG8
#define GX2_SURFACE_FORMAT_TCS_R5_G6_B5_UNORM       GX2_SURFACE_FORMAT_UNORM_RGB565
#define GX2_SURFACE_FORMAT_TC_R5_G5_B5_A1_UNORM     GX2_SURFACE_FORMAT_UNORM_RGB5A1
#define GX2_SURFACE_FORMAT_TC_R4_G4_B4_A4_UNORM     GX2_SURFACE_FORMAT_UNORM_RGBA4
#define GX2_SURFACE_FORMAT_TC_A1_B5_G5_R5_UNORM     GX2_SURFACE_FORMAT_UNORM_A1BGR5
#define GX2_SURFACE_FORMAT_TC_R32_UINT              GX2_SURFACE_FORMAT_UINT_R32
#define GX2_SURFACE_FORMAT_TC_R32_SINT              GX2_SURFACE_FORMAT_SINT_R32
#define GX2_SURFACE_FORMAT_TCD_R32_FLOAT            GX2_SURFACE_FORMAT_FLOAT_R32
#define GX2_SURFACE_FORMAT_TC_R16_G16_UNORM         GX2_SURFACE_FORMAT_UNORM_RG16
#define GX2_SURFACE_FORMAT_TC_R16_G16_UINT          GX2_SURFACE_FORMAT_UINT_RG16
#define GX2_SURFACE_FORMAT_TC_R16_G16_SNORM         GX2_SURFACE_FORMAT_SNORM_RG16
#define GX2_SURFACE_FORMAT_TC_R16_G16_SINT          GX2_SURFACE_FORMAT_SINT_RG16
#define GX2_SURFACE_FORMAT_TC_R16_G16_FLOAT         GX2_SURFACE_FORMAT_FLOAT_RG16
#define GX2_SURFACE_FORMAT_D_D24_S8_UNORM           GX2_SURFACE_FORMAT_UNORM_R24X8
#define GX2_SURFACE_FORMAT_T_R24_UNORM_X8           GX2_SURFACE_FORMAT_UNORM_R24X8
#define GX2_SURFACE_FORMAT_T_X24_G8_UINT            GX2_SURFACE_FORMAT_UINT_X24G8
#define GX2_SURFACE_FORMAT_D_D24_S8_FLOAT           GX2_SURFACE_FORMAT_FLOAT_D24S8
#define GX2_SURFACE_FORMAT_TC_R11_G11_B10_FLOAT     GX2_SURFACE_FORMAT_FLOAT_RG11B10
#define GX2_SURFACE_FORMAT_TCS_R10_G10_B10_A2_UNORM GX2_SURFACE_FORMAT_UNORM_RGB10A2
#define GX2_SURFACE_FORMAT_TC_R10_G10_B10_A2_UINT   GX2_SURFACE_FORMAT_UINT_RGB10A2
#define GX2_SURFACE_FORMAT_T_R10_G10_B10_A2_SNORM   GX2_SURFACE_FORMAT_SNORM_RGB10A2
#define GX2_SURFACE_FORMAT_TC_R10_G10_B10_A2_SNORM  GX2_SURFACE_FORMAT_T_R10_G10_B10_A2_SNORM
#define GX2_SURFACE_FORMAT_TC_R10_G10_B10_A2_SINT   GX2_SURFACE_FORMAT_SINT_RGB10A2
#define GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_UNORM    GX2_SURFACE_FORMAT_UNORM_RGBA8
#define GX2_SURFACE_FORMAT_TC_R8_G8_B8_A8_UINT      GX2_SURFACE_FORMAT_UINT_RGBA8
#define GX2_SURFACE_FORMAT_TC_R8_G8_B8_A8_SNORM     GX2_SURFACE_FORMAT_SNORM_RGBA8
#define GX2_SURFACE_FORMAT_TC_R8_G8_B8_A8_SINT      GX2_SURFACE_FORMAT_SINT_RGBA8
#define GX2_SURFACE_FORMAT_TCS_R8_G8_B8_A8_SRGB     GX2_SURFACE_FORMAT_SRGB_RGBA8
#define GX2_SURFACE_FORMAT_TCS_A2_B10_G10_R10_UNORM GX2_SURFACE_FORMAT_UNORM_A2BGR10
#define GX2_SURFACE_FORMAT_TC_A2_B10_G10_R10_UINT   GX2_SURFACE_FORMAT_UINT_A2BGR10
#define GX2_SURFACE_FORMAT_D_D32_FLOAT_S8_UINT_X24  GX2_SURFACE_FORMAT_FLOAT_X8X24
#define GX2_SURFACE_FORMAT_T_R32_FLOAT_X8_X24       GX2_SURFACE_FORMAT_FLOAT_X8X24
#define GX2_SURFACE_FORMAT_T_X32_G8_UINT_X24        GX2_SURFACE_FORMAT_UINT_G8X24
#define GX2_SURFACE_FORMAT_TC_R32_G32_UINT          GX2_SURFACE_FORMAT_UINT_RG32
#define GX2_SURFACE_FORMAT_TC_R32_G32_SINT          GX2_SURFACE_FORMAT_SINT_RG32
#define GX2_SURFACE_FORMAT_TC_R32_G32_FLOAT         GX2_SURFACE_FORMAT_FLOAT_RG32
#define GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_UNORM GX2_SURFACE_FORMAT_UNORM_RGBA16
#define GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_UINT  GX2_SURFACE_FORMAT_UINT_RGBA16
#define GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_SNORM GX2_SURFACE_FORMAT_SNORM_RGBA16
#define GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_SINT  GX2_SURFACE_FORMAT_SINT_RGBA16
#define GX2_SURFACE_FORMAT_TC_R16_G16_B16_A16_FLOAT GX2_SURFACE_FORMAT_FLOAT_RGBA16
#define GX2_SURFACE_FORMAT_TC_R32_G32_B32_A32_UINT  GX2_SURFACE_FORMAT_UINT_RGBA32
#define GX2_SURFACE_FORMAT_TC_R32_G32_B32_A32_SINT  GX2_SURFACE_FORMAT_SINT_RGBA32
#define GX2_SURFACE_FORMAT_TC_R32_G32_B32_A32_FLOAT GX2_SURFACE_FORMAT_FLOAT_RGBA32
#define GX2_SURFACE_FORMAT_T_BC1_UNORM              GX2_SURFACE_FORMAT_UNORM_BC1
#define GX2_SURFACE_FORMAT_T_BC1_SRGB               GX2_SURFACE_FORMAT_SRGB_BC1
#define GX2_SURFACE_FORMAT_T_BC2_UNORM              GX2_SURFACE_FORMAT_UNORM_BC2
#define GX2_SURFACE_FORMAT_T_BC2_SRGB               GX2_SURFACE_FORMAT_SRGB_BC2
#define GX2_SURFACE_FORMAT_T_BC3_UNORM              GX2_SURFACE_FORMAT_UNORM_BC3
#define GX2_SURFACE_FORMAT_T_BC3_SRGB               GX2_SURFACE_FORMAT_SRGB_BC3
#define GX2_SURFACE_FORMAT_T_BC4_UNORM              GX2_SURFACE_FORMAT_UNORM_BC4
#define GX2_SURFACE_FORMAT_T_BC4_SNORM              GX2_SURFACE_FORMAT_SNORM_BC4
#define GX2_SURFACE_FORMAT_T_BC5_UNORM              GX2_SURFACE_FORMAT_UNORM_BC5
#define GX2_SURFACE_FORMAT_T_BC5_SNORM              GX2_SURFACE_FORMAT_SNORM_BC5
#define GX2_SURFACE_FORMAT_T_NV12_UNORM             GX2_SURFACE_FORMAT_UNORM_NV12
#define GX2_SURFACE_FORMAT_FIRST                    GX2_SURFACE_FORMAT_TC_R8_UNORM
#define GX2_SURFACE_FORMAT_LAST                     ((GX2SurfaceFormat)0x0000083f)

typedef enum _GX2TexClamp
{
    GX2_TEX_CLAMP_WRAP                    = 0,
    GX2_TEX_CLAMP_MIRROR                  = 1,
    GX2_TEX_CLAMP_CLAMP                   = 2,
    GX2_TEX_CLAMP_MIRROR_ONCE             = 3,
    GX2_TEX_CLAMP_CLAMP_HALF_BORDER       = 4,
    GX2_TEX_CLAMP_MIRROR_ONCE_HALF_BORDER = 5,
    GX2_TEX_CLAMP_CLAMP_BORDER            = 6,
    GX2_TEX_CLAMP_MIRROR_ONCE_BORDER      = 7,
    GX2_TEX_CLAMP_FIRST  = GX2_TEX_CLAMP_WRAP,
    GX2_TEX_CLAMP_LAST   = GX2_TEX_CLAMP_MIRROR_ONCE_BORDER
} GX2TexClamp;

typedef enum _GX2TexBorderType
{
    GX2_TEX_BORDER_CLEAR_BLACK  = 0,
    GX2_TEX_BORDER_SOLID_BLACK  = 1,
    GX2_TEX_BORDER_SOLID_WHITE  = 2,
    GX2_TEX_BORDER_USE_REGISTER = 3,
    GX2_TEX_BORDER_FIRST  = GX2_TEX_BORDER_CLEAR_BLACK,
    GX2_TEX_BORDER_LAST   = GX2_TEX_BORDER_USE_REGISTER
} GX2TexBorderType;

typedef enum _GX2TexXYFilterType
{
    GX2_TEX_XY_FILTER_POINT    = 0,
    GX2_TEX_XY_FILTER_BILINEAR = 1,
    GX2_TEX_XY_FILTER_FIRST    = GX2_TEX_XY_FILTER_POINT,
    GX2_TEX_XY_FILTER_LAST     = GX2_TEX_XY_FILTER_BILINEAR
} GX2TexXYFilterType;

typedef enum _GX2TexZFilterType
{
    GX2_TEX_Z_FILTER_USE_XY = 0,
    GX2_TEX_Z_FILTER_POINT  = 1,
    GX2_TEX_Z_FILTER_LINEAR = 2,
    GX2_TEX_Z_FILTER_FIRST  = GX2_TEX_Z_FILTER_USE_XY,
    GX2_TEX_Z_FILTER_LAST   = GX2_TEX_Z_FILTER_LINEAR
} GX2TexZFilterType;

typedef enum _GX2TexMipFilterType
{
    GX2_TEX_MIP_FILTER_NO_MIP = 0,
    GX2_TEX_MIP_FILTER_POINT  = 1,
    GX2_TEX_MIP_FILTER_LINEAR = 2,
    GX2_TEX_MIP_FILTER_FIRST  = GX2_TEX_MIP_FILTER_NO_MIP,
    GX2_TEX_MIP_FILTER_LAST   = GX2_TEX_MIP_FILTER_LINEAR
} GX2TexMipFilterType;

typedef enum _GX2TexAnisoRatio
{
    GX2_TEX_ANISO_1_TO_1  = 0,
    GX2_TEX_ANISO_2_TO_1  = 1,
    GX2_TEX_ANISO_4_TO_1  = 2,
    GX2_TEX_ANISO_8_TO_1  = 3,
    GX2_TEX_ANISO_16_TO_1 = 4,
    GX2_TEX_ANISO_FIRST = GX2_TEX_ANISO_1_TO_1,
    GX2_TEX_ANISO_LAST  = GX2_TEX_ANISO_16_TO_1
} GX2TexAnisoRatio;

typedef enum _GX2EndianSwapMode
{
    GX2_ENDIANSWAP_NONE    = 0,
    GX2_ENDIANSWAP_8IN16   = 1,
    GX2_ENDIANSWAP_8IN32   = 2,
    GX2_ENDIANSWAP_DEFAULT = 3,
    GX2_ENDIANSWAP_FIRST   = GX2_ENDIANSWAP_NONE,
    GX2_ENDIANSWAP_LAST    = GX2_ENDIANSWAP_DEFAULT
} GX2EndianSwapMode;

typedef enum GX2FetchShaderType {
    GX2_FETCH_SHADER_TESSELATION_NONE      =  0x0,
    GX2_FETCH_SHADER_TESSELATION_LINES     =  0x1,
    GX2_FETCH_SHADER_TESSELATION_TRIANGLES =  0x2,
    GX2_FETCH_SHADER_TESSELATION_QUADS     =  0x3,
    GX2_FETCH_SHADER_TYPE_FIRST     =  GX2_FETCH_SHADER_TESSELATION_NONE,
    GX2_FETCH_SHADER_TYPE_LAST      =  GX2_FETCH_SHADER_TESSELATION_QUADS
} GX2FetchShaderType;
